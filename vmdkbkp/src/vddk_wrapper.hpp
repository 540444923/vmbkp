/**
 * @file
 * @brief Header file of VddkWorker and VddkController.
 *
 * Copyright (C) 2009,2010 Cybozu Inc., all rights reserved.
 *
 * @author Takashi HOSHINO <hoshino@labs.cybozu.co.jp>
 */
#ifndef VMDKBACKUP_VDDK_WRAPPER_HPP_
#define VMDKBACKUP_VDDK_WRAPPER_HPP_

#include "vddk_manager.hpp"
#include "fork_manager.hpp"
#include "header.hpp"
#include "stream_socket.hpp"

/**
 * Protocols between parent and child.
 *
 * Description
 *   p: xxxx (parent sends xxxx message to child.)
 *   c: yyyy (child sends yyyy message to parent.)
 *
 * p: EXIT
 * c: OK
 *
 * p: createVmdk
 * p: [dumpH]
 * c: OK | EXCEPTION
 *
 * p: shrinkVmdk
 * c: OK | EXCEPTION
 *
 * p: getTransportMode
 * c: [transport mode]
 *
 * p: readVmdkInfo
 * c: OK | EXCEPTION
 * OK ->
 *   c: [vmdkInfo]
 *
 * p: readMetadata
 * c: OK | EXCEPTION
 * OK ->
 *   c: [metadata]
 *
 * p: writeMetadata
 * p: [metadata]
 * c: OK | EXCEPTION
 *
 * p: readBlock
 * p: [blockOffset]
 * c: OK | EXCEPTION
 * OK -->
 *   c: [byte array]
 *
 * p: writeBlock
 * p: [blockOffset]
 * p: [byte array]
 * c: OK | EXCEPTION
 *
 * p: open
 * c: OK | EXCEPTION
 *
 * p: close
 * c: OK | EXCEPTION
 */

/**
 * @brief Wrapper of VddkManager and VmdkManager
 * which is running by child process.
 *
 * Causion! This class is not thread safe.
 */
class VddkWorker
    : public ForkManager
{
private:
    const ConfigData& cfg_;
    bool isReadOnly_;
    bool isSAN_;

    /**
     * StreamSocket to communicate with Child.
     */
    StreamSocketPtr sockP_;
    /**
     * Target managers.
     */
    boost::shared_ptr<VddkManager> vddkMgrPtr_;
    boost::shared_ptr<VmdkManager> vmdkMgrPtr_;
     
public:
    /**
     * Constructor.
     * Caller of this will be the parent process.
     */
    VddkWorker(const ConfigData& cfg, bool isReadOnly, bool isSAN);
    /**
     * Destructor.
     */
    ~VddkWorker();
    /**
     * Get socket for parent-child communication.
     */
    StreamSocketPtr getSock();
    /**
     * Get config data.
     */
    const ConfigData& getConfig() const;
    /**
     * Exit VDDK. Child process must call this.
     */
    void exitVddk();

protected:
    /**
     * Child process runs this.
     */
    int run();

private:
    /**
     * Exit child process.
     */
    int exitChild();
    /**
     * Dispatcher of each method.
     */
    int dispatch(const std::string& cmd);
    /**
     * Child stab for open().
     */
    int open();
    /**
     * Child stab for close().
     */
    int close();
    /**
     * Child stab for createVmdkFile().
     */
    int createVmdkFile();
    /**
     * Child stab for shrinkVmdk().
     */
    int shrinkVmdk();
    /**
     * Child stab for getTransportMode().
     */
    int getTransportMode();
    /**
     * Child stab for readVmdkInfo().
     */
    int readVmdkInfo();
    /**
     * Child stab for readMetadata().
     */
    int readMetadata();
    /**
     * Child stab for writeMetadata().
     */
    int writeMetadata();
    /**
     * Child stab for readBlock().
     */
    int readBlock();
    /**
     * Child stab for writeBlock().
     */
    int writeBlock();
};

/**
 * @brief Controll running child process generated by VddkWorker.
 * from parent side.
 */
class VddkController
{
private:
    /**
     * VddkWorker that the instance controlls.
     */
    boost::shared_ptr<VddkWorker> vddkWorkerPtr_;
    /**
     * Shared global configuration.
     */
    const ConfigData& cfg_;
    /**
     * StreamSocket to communicate with Child.
     */
    StreamSocketPtr sockP_;
    
public:
    /**
     * Constructor.
     *
     * @param cfg Config data for reference.
     * @param isReadOnly True if readonly.
     * @param isSAN True if you prefer to use SAN transfer.
     */
    VddkController(const ConfigData& cfg, bool isReadOnly, bool isSAN);
    /**
     * Destructor;
     */
    ~VddkController();
    /**
     * Send signal to child.
     */
    void kill(int signum);
    /**
     * Start child process that starts VDDK connection and library.
     */
    void start();
    /**
     * Disconnect and exit VDDK normally.
     */
    void stop();
    /**
     * Reset the VDDK connection and library.
     *
     * @return false if failed.
     */
    bool reset(bool isReadOnly_, bool isSAN_);
    /**
     * Open vmdk file.
     * This is parent stab.
     */
    void open();
    /**
     * Close vmdk file.
     * This is parent stab.
     */
    void close();
    /**
     * Create vmdk file using the specified dump header.
     * This is parent stab.
     *
     * @param dumpH Dump header data.
     * @exception Throws VixException, MyException.
     */
    void createVmdkFile(const VmdkDumpHeader& dumpH);
    /**
     * A simple wrapper of VDDK Shrink.
     * This is parent stab.
     *
     * @exception Throws VixException.
     */
    void shrinkVmdk();
    /**
     * Read vmdk information.
     * This is parent stab.
     *
     * @param vmdkInfo returned vmdk information.
     * @exception Throws VixException, std::string.
     */
    void readVmdkInfo(VmdkInfo& vmdkInfo);
    /**
     * Wrapper of VixDiskLib_GetTransportMode().
     * This is parent stab.
     */
    std::string getTransportMode() const;
    /**
     * Read meta data of vmdk file.
     * A wrapper of VixDiskLib_ReadMetadata().
     * This is parent stab.
     *
     * @param metadata Read metadata will be stored in this map.
     *        This must be preallocated.
     * @exception Throws VixException.
     */
    void readMetadata(StringMap& metadata);
    /**
     * Write meta data of vmdk file.
     * A wrapper of VixDiskLib_WriteMetadata().
     * This is parent stab.
     * 
     * @param metadata All data in this map will be written.
     * @exception Throws VixException.
     */
    void writeMetadata(const StringMap& metadata);
    /**
     * Read a block from the vmdk file.
     * This is parent stab.
     *
     * @param blockOffset Block offset in the vmdk.
     * @param buf read contents will be copied to this buffer.
     * @return true in success or false.
     * @exception Throws VixException.
     */
    void readBlock(
        const uint64 blockOffset, uint8* buf);
    /**
     * Write a block to the vmdk file.
     * This is parent stab.
     *
     * @param blockOffset Block offset in the vmdk.
     * @param buf contents will be copied from this buffer.
     * @return true in success or false.
     * @exception Throws VixException.
     */
    void writeBlock(
        const uint64 blockOffset, const uint8* buf);
};


#endif /* VMDKBACKUP_VDDK_WRAPPER_HPP_ */
